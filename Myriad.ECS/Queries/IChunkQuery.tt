<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateHeaders/ParallelWorkLoopSetup.t4" #>
<#
	const int PARAM_COUNT = 16;
#>
using Myriad.ECS.Queries;
using Myriad.ECS.IDs;
using Myriad.ECS.Threading;
using Myriad.ECS.Allocations;
using System.Buffers;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

// ReSharper disable UnusedType.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable LoopCanBeConvertedToQuery

<# for (var i = 1; i <= PARAM_COUNT; i++)
{
	var sumij = i;
	var queryConstraints = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
	var workItemName = $"ChunkWorkItem{i}<TQ, {queryConstraints}>";
#>
namespace Myriad.ECS.Queries
{
	/// <summary>
	/// Process entire chunks of entities together.
	/// </summary>
	public interface IChunkQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
		where <#= Constraints(i, 8) #>
	{
		/// <summary>
		/// Process a chunk of entities all together. Items for the same entity are at the same index in all spans.
		/// </summary>
		public void Execute(ChunkHandle chunk, <#= Refs(0, i) #>);
	}
}

namespace Myriad.ECS.Worlds
{
	public partial class World
	{
		/// <summary>
        /// Execute a query which executes on entire chunks.
        /// </summary>
        /// <typeparam name="TQ">The type of the query</typeparam>
<# for (var k = 0; k < sumij; k++)
{
#>
        /// <typeparam name="T<#= k #>">Type of component <#= k #> to retrieve</typeparam>
<#
}
#>
        /// <param name="query">A query expressing which entities to execute this query over. If null a suitable
		/// query object will automatically be created and written into this field.</param>
        /// <returns>The total number of entities processed</returns>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int ExecuteChunk<TQ, <#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>(
			QueryDescription? query = null
		)
			where <#= Constraints(i, 12) #>
			where TQ : IChunkQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>, new()
		{
			var q = new TQ();
			return ExecuteChunk<TQ, <#= queryConstraints #>>(ref q, query);
		}

		/// <summary>
        /// Execute a query which executes on entire chunks.
        /// </summary>
        /// <typeparam name="TQ">The type of the query</typeparam>
<# for (var k = 0; k < sumij; k++)
{
#>
        /// <typeparam name="T<#= k #>">Type of component <#= k #> to retrieve</typeparam>
<#
}
#>
        /// <param name="query">A query expressing which entities to execute this query over. If null a suitable
		/// query object will automatically be created and written into this field.</param>
        /// <returns>The total number of entities processed</returns>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int ExecuteChunk<TQ, <#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>(
			ref QueryDescription? query
		)
			where <#= Constraints(i, 12) #>
			where TQ : IChunkQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>, new()
		{
			var q = new TQ();
			return ExecuteChunk<TQ, <#= queryConstraints #>>(ref q, ref query);
		}

		/// <summary>
        /// Execute a query which executes on entire chunks.
        /// </summary>
        /// <typeparam name="TQ">The type of the query</typeparam>
<# for (var k = 0; k < sumij; k++)
{
#>
        /// <typeparam name="T<#= k #>">Type of component <#= k #> to retrieve</typeparam>
<#
}
#>
        /// <param name="query">A query expressing which entities to execute this query over. If null a suitable
		/// query object will automatically be created and written into this field.</param>
		/// <param name="q">The TQ instance which will be executed for each chunk</param>
        /// <returns>The total number of entities processed</returns>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int ExecuteChunk<TQ, <#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>(
			TQ q,
			QueryDescription? query = null
		)
			where <#= Constraints(i, 12) #>
			where TQ : IChunkQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
		{
			return ExecuteChunk<TQ, <#= queryConstraints #>>(ref q, query);
		}

		/// <summary>
        /// Execute a query which executes on entire chunks.
        /// </summary>
        /// <typeparam name="TQ">The type of the query</typeparam>
<# for (var k = 0; k < sumij; k++)
{
#>
        /// <typeparam name="T<#= k #>">Type of component <#= k #> to retrieve</typeparam>
<#
}
#>
        /// <param name="q">The TQ instance which will be executed for each chunk</param>
        /// <param name="query">A query expressing which entities to execute this query over. If null a suitable
		/// query object will automatically be created and written into this field.</param>
        /// <returns>The total number of entities processed</returns>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int ExecuteChunk<TQ, <#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>(
			TQ q,
			ref QueryDescription? query
		)
			where <#= Constraints(i, 12) #>
			where TQ : IChunkQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
		{
			return ExecuteChunk<TQ, <#= queryConstraints #>>(ref q, ref query);
		}

		/// <summary>
        /// Execute a query which executes on entire chunks.
        /// </summary>
        /// <typeparam name="TQ">The type of the query</typeparam>
<# for (var k = 0; k < sumij; k++)
{
#>
        /// <typeparam name="T<#= k #>">Type of component <#= k #> to retrieve</typeparam>
<#
}
#>
        /// <param name="q">The TQ instance which will be executed for each chunk</param>
        /// <param name="query">A query expressing which entities to execute this query over. If null a default
		/// query object will be used (based on type parameters).</param>
        /// <returns>The total number of entities processed</returns>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int ExecuteChunk<TQ, <#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>(
			ref TQ q,
			QueryDescription? query = null
		)
			where <#= Constraints(i, 12) #>
			where TQ : IChunkQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
		{
			return ExecuteChunk<TQ, <#= queryConstraints #>>(ref q, ref query);
		}

		/// <summary>
        /// Execute a query which executes on entire chunks.
        /// </summary>
        /// <typeparam name="TQ">The type of the query</typeparam>
<# for (var k = 0; k < sumij; k++)
{
#>
        /// <typeparam name="T<#= k #>">Type of component <#= k #> to retrieve</typeparam>
<#
}
#>
        /// <param name="q">The TQ instance which will be executed for each chunk</param>
        /// <param name="query">A query expressing which entities to execute this query over. If null a suitable
		/// query object will automatically be created and written into this field.</param>
        /// <returns>The total number of entities processed</returns>
		<#= CoverageAttribute(i) #>
		public int ExecuteChunk<TQ, <#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>(
			ref TQ q,
			ref QueryDescription? query
		)
			where <#= Constraints(i, 12) #>
			where TQ : IChunkQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
		{
			query ??= GetCachedQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>();

			var archetypes = query.GetArchetypes();

<# for (var k = 0; k < sumij; k++)
{
#>
		    var c<#= k #> = ComponentID<T<#= k #>>.ID;
<#
}
#>

			var count = 0;
			foreach (var archetypeMatch in archetypes)
			{
			    var archetype = archetypeMatch.Archetype;

				var chunks = archetype.Chunks;
				for (var c = chunks.Count - 1; c >= 0; c--)
				{
					var chunk = chunks[c];
					count += chunk.EntityCount;

<# for (var k = 0; k < sumij; k++)
{
#>
					var t<#= k #> = chunk.GetSpan<T<#= k #>>(c<#= k #>);
<#
}
#>

					q.Execute(new ChunkHandle(chunk), <#= CallParameters(sumij) #>);
				}
			}

			return count;
		}

		/// <summary>
        /// Execute a query which executes on entire chunks. Executes work in parallel at the chunk
		/// level.
        /// </summary>
        /// <typeparam name="TQ">The type of the query</typeparam>
<# for (var k = 0; k < sumij; k++)
{
#>
        /// <typeparam name="T<#= k #>">Type of component <#= k #> to retrieve</typeparam>
<#
}
#>
        /// <param name="q">The TQ instance which will be executed for each chunk</param>
        /// <param name="query">A query expressing which entities to execute this query over. If null a suitable
		/// query object will automatically be created and written into this field.</param>
        /// <returns>The total number of entities processed</returns>
		<#= CoverageAttribute(i) #>
		public int ExecuteChunkParallel<TQ, <#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>(
			TQ q,
			QueryDescription? query = null
		)
			where <#= Constraints(sumij, 12) #>
			where TQ : IChunkQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
		{
			query ??= GetCachedQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>();

			var archetypes = query.GetArchetypes();

			// Early exit if there is no work to do, avoiding the cost of setting up the worker pool
			if (archetypes.Count == 0 || !query.Any())
				return 0;

<#
			EmitParallelWorkLoopSetup(workItemName);
#>

			var count = 0;
			foreach (var archetypeMatch in archetypes)
			{
				var archetype = archetypeMatch.Archetype;
				if (archetype.EntityCount == 0)
					continue;

				count += archetype.EntityCount;

				// Inrement work counter for all of the chunk we're about to enqueue
				workCounter.AddCount(archetype.Chunks.Count);

				using var enumerator = archetype.GetChunkEnumerator();
				while (enumerator.MoveNext())
				{
					var chunk = enumerator.Current;
					var item = new <#= workItemName #>(chunk, q);

<#
					EmitEnqueueParallelWork("item", false);
#>
				}
			}

<#
			EmitParallelWorkLoopWaitAndTeardown(workItemName);
#>

			return count;
		}

		<#= CoverageAttribute(i) #>
		private readonly struct ChunkWorkItem<#= i #><TQ, <#= queryConstraints #>>
			: IWorkItem
			where <#= Constraints(i, 12) #>
			where TQ : IChunkQuery<<#= queryConstraints #>>
		{
			private readonly TQ _q;
			private readonly Chunks.Chunk _chunk;

			public ChunkWorkItem<#= i #>(Chunks.Chunk chunk, TQ q)
			{
				_chunk = chunk;
				_q = q;
			}

			public void Execute()
			{
				_q.Execute(
					new ChunkHandle(_chunk)
<# for (var k = 0; k < i; k++)
{
#>
					, _chunk.GetSpan<T<#= k #>>()
<#
}
#>
				);
			}
		}
	}
}

<#
}
#>


<#+ 
	static string CoverageAttribute(int index)
	{
		if (index < 2)
			return "";
		return "[ExcludeFromCodeCoverage]";
	}

	static string Constraints(int count, int spaces = 4)
    {
        var prefix = new string(' ', spaces);
        var str = string.Join(
			$"\r\n{prefix}where ",
			Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
		);

		return str;
    }

	static string Mod(int index, int mutable, int @readonly)
	{
		return index < mutable ? "ref" : "in";
	}

	static string Refs(int start, int count)
	{
		var str = string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"Span<T{x}> t{x}")
		);

		return str;
	}

    static string CallParameters(int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"t{x}")
        );

        return str;
    }
#>