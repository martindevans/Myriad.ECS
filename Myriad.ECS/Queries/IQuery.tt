<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateHeaders/ParallelWorkLoopSetup.t4" #>
<#
	const int PARAM_COUNT = 16;
#>
using System.Diagnostics;
using System.Buffers;
using Myriad.ECS.Queries;
using Myriad.ECS.IDs;
using Myriad.ECS.Worlds.Archetypes;
using Myriad.ECS.Allocations;
using Myriad.ECS.Threading;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

// ReSharper disable UnusedType.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable LoopCanBeConvertedToQuery
// ReSharper disable ConvertToPrimaryConstructor

<# for (var i = 1; i <= PARAM_COUNT; i++)
{
	var queryConstraints = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
	var workItemName = $"WorkItem{i}<TQ, {queryConstraints}>";
#>
namespace Myriad.ECS.Queries
{
	/// <summary>
	/// A query which accepts <#= i #> components
	/// </summary>
	public interface IQuery<<#= queryConstraints #>>
		where <#= Constraints(i, 8) #>
	{
		/// <summary>
		/// Execute the query for a single entity
		/// </summary>
		public void Execute(Entity e, <#= Refs(0, i) #>);
	}
}

namespace Myriad.ECS.Worlds
{
	public partial class World
	{
		/// <summary>
		/// Execute a query, optionally filtering by a <see cref="QueryDescription"/>.
		/// </summary>
		/// <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
<# for (var k = 0; k < i; k++)
{
#>
		/// <typeparam name="T<#= k #>">Component <#= k #> to include in query</typeparam>
<#
}
#>
		<#= DocsQueryDescription() #>
		/// <returns>The number of entities discovered by this query</returns>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Execute<TQ, <#= queryConstraints #>>(
			QueryDescription? query = null
		)
			where <#= Constraints(i, 12) #>
			where TQ : IQuery<<#= queryConstraints #>>, new()
		{
			var q = new TQ();
			return Execute<TQ, <#= queryConstraints #>>(ref q, query);
		}

		/// <summary>
		/// Execute a query, optionally filtering by a <see cref="QueryDescription"/>.
		/// </summary>
		/// <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
<# for (var k = 0; k < i; k++)
{
#>
		/// <typeparam name="T<#= k #>">Component <#= k #> to include in query</typeparam>
<#
}
#>
		<#= DocsRefQueryDescription() #>
		/// <returns>The number of entities discovered by this query</returns>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Execute<TQ, <#= queryConstraints #>>(
			ref QueryDescription? query
		)
			where <#= Constraints(i, 12) #>
			where TQ : IQuery<<#= queryConstraints #>>, new()
		{
			var q = new TQ();
			return Execute<TQ, <#= queryConstraints #>>(ref q, ref query);
		}

		/// <summary>
		/// Execute a query, optionally filtering by a <see cref="QueryDescription"/>.
		/// </summary>
		/// <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
<# for (var k = 0; k < i; k++)
{
#>
		/// <typeparam name="T<#= k #>">Component <#= k #> to include in query</typeparam>
<#
}
#>
		/// <param name="q">The instance to execute over every entity.</param>
		/// <param name="query"></param>
		/// <returns>The number of entities discovered by this query</returns>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Execute<TQ, <#= queryConstraints #>>(
			TQ q,
			QueryDescription? query = null
		)
			where <#= Constraints(i, 12) #>
			where TQ : IQuery<<#= queryConstraints #>>
		{
			return Execute<TQ, <#= queryConstraints #>>(ref q, query);
		}

		/// <summary>
		/// Execute a query, optionally filtering by a <see cref="QueryDescription"/>.
		/// </summary>
		/// <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
<# for (var k = 0; k < i; k++)
{
#>
		/// <typeparam name="T<#= k #>">Component <#= k #> to include in query</typeparam>
<#
}
#>
		<#= DocsRefQueryDescription() #>
		/// <param name="q">The instance to execute over every entity.</param>
		/// <returns>The number of entities discovered by this query</returns>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Execute<TQ, <#= queryConstraints #>>(
			TQ q,
			ref QueryDescription? query
		)
			where <#= Constraints(i, 12) #>
			where TQ : IQuery<<#= queryConstraints #>>
		{
			return Execute<TQ, <#= queryConstraints #>>(ref q, ref query);
		}

		/// <summary>
		/// Execute a query, optionally filtering by a <see cref="QueryDescription"/>.
		/// </summary>
		/// <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
<# for (var k = 0; k < i; k++)
{
#>
		/// <typeparam name="T<#= k #>">Component <#= k #> to include in query</typeparam>
<#
}
#>
		/// <param name="q">
		/// The instance to execute over every entity. Passed by ref, so changes to the query
		/// struct will be persistent. This can allow values from one entity to be accessed by
		/// the next entity, or after the entire Execute call is complete.
		/// </param>
		<#= DocsQueryDescription() #>
		/// <returns>The number of entities discovered by this query</returns>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Execute<TQ, <#= queryConstraints #>>(
			ref TQ q,
			QueryDescription? query = null
		)
			where <#= Constraints(i, 12) #>
			where TQ : IQuery<<#= queryConstraints #>>
		{
			return Execute<TQ, <#= queryConstraints #>>(ref q, ref query);
		}

		/// <summary>
		/// Execute a query, optionally filtering by a <see cref="QueryDescription"/>.
		/// </summary>
		/// <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
<# for (var k = 0; k < i; k++)
{
#>
		/// <typeparam name="T<#= k #>">Component <#= k #> to include in query</typeparam>
<#
}
#>
		/// <param name="q">
		/// The instance to execute over every entity. Passed by ref, so changes to the query
		/// struct will be persistent. This can allow values from one entity to be accessed by
		/// the next entity, or after the entire Execute call is complete.
		/// </param>
		<#= DocsRefQueryDescription() #>
		/// <returns>The number of entities discovered by this query</returns>
		<#= CoverageAttribute(i) #>
		public int Execute<TQ, <#= queryConstraints #>>(
			ref TQ q,
			ref QueryDescription? query
		)
			where <#= Constraints(i, 12) #>
			where TQ : IQuery<<#= queryConstraints #>>
		{
			query ??= GetCachedQuery<<#= queryConstraints #>>();

			var archetypes = query.GetArchetypes();

<# for (var k = 0; k < i; k++)
{
#>
			var c<#= k #> = ComponentID<T<#= k #>>.ID;
<#
}
#>

			var count = 0;
			foreach (var archetypeMatch in archetypes)
			{
			    var archetype = archetypeMatch.Archetype;

				count += archetype.EntityCount;

				using (var enumerator = archetype.GetChunkEnumerator())
				{
					while (enumerator.MoveNext())
					{
						var chunk = enumerator.Current;
						Debug.Assert(chunk != null);

						var entities = chunk.Entities.Span;

<# for (var k = 0; k < i; k++)
{
#>
						var t<#= k #> = chunk.GetSpan<T<#= k #>>(c<#= k #>);
						Debug.Assert(t<#= k #>.Length == entities.Length);
<#
}
#>

						unsafe
						{
							#pragma warning disable CS8500 // This takes the address of, gets the size of, or declares a pointer to a managed type
							fixed (Entity* eptr = entities)
<# for (var k = 0; k < i; k++)
{
#>
							fixed (T<#= k #>* t<#= k #>ptr = t<#= k #>)
<#
}
#>
							#pragma warning restore CS8500
							{
								for (var i = 0; i < entities.Length; i++)
									q.Execute(eptr[i], <#= CallParametersPtr(i) #>);
							}
						}
					}
				}
			}

			return count;
		}

		/// <summary>
		/// Execute a query, optionally filtering by a <see cref="QueryDescription"/>. Using a cursor to early exit
		/// and resume execution.
		/// </summary>
		/// <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
<# for (var k = 0; k < i; k++)
{
#>
		/// <typeparam name="T<#= k #>">Component <#= k #> to include in query</typeparam>
<#
}
#>
		/// <param name="q">
		/// The instance to execute over every entity. Passed by ref, so changes to the query
		/// struct will be persistent. This can allow values from one entity to be accessed by
		/// the next entity, or after the entire Execute call is complete.
		/// </param>
		/// <param name="cursor">Tracks how manu archetypes and chunks were executed in the query. If the number of processed entities exceeds the budget set in
		/// the cursor execution will early exit. Passing the same cursor to the same query again will resume at approximately the same position. This is only
		/// approximate because new archetypes may be created, or chunks may be added and removed</param>
		<#= DocsRefQueryDescription() #>
		/// <returns>The number of entities discovered by this query</returns>
		<#= CoverageAttribute(i) #>
		public int Execute<TQ, <#= queryConstraints #>>(
			ref TQ q,
			ref QueryDescription? query,
			Cursor cursor
		)
			where <#= Constraints(i, 12) #>
			where TQ : IQuery<<#= queryConstraints #>>
		{
			query ??= GetCachedQuery<<#= queryConstraints #>>();

			var archetypes = query.GetArchetypes();

<# for (var k = 0; k < i; k++)
{
#>
			var c<#= k #> = ComponentID<T<#= k #>>.ID;
<#
}
#>

			var entityCount = 0;
			var lastCompletedArchetype = default(Archetype);

			using (var archetypesEnumerator = archetypes.GetEnumerator())
			{
				// Search forward until the archetype is found
				while (cursor.LastArchetype != null && cursor.LastArchetype != archetypesEnumerator.Current.Archetype)
				{
					if (!archetypesEnumerator.MoveNext())
					{
						cursor.Reset();
						return entityCount;
					}
				}

				// Loop over archetypes processing chunks
				while (archetypesEnumerator.MoveNext())
				{
					var archetype = archetypesEnumerator.Current.Archetype;
					var chunks = archetype.GetChunkEnumerator();
					try
					{
						// Skip over chunks
						if (!chunks.Skip(cursor.Chunks))
						{
							cursor.Reset();
							return entityCount;
						}

						// Process remaining chunks
						while (chunks.MoveNext())
						{
							cursor.Chunks++;

							var chunk = chunks.Current;
							Debug.Assert(chunk != null);

							var entities = chunk.Entities.Span;
							entityCount += entities.Length;

<# for (var k = 0; k < i; k++)
{
#>
							var t<#= k #> = chunk.GetSpan<T<#= k #>>(c<#= k #>);
							Debug.Assert(t<#= k #>.Length == entities.Length);
<#
}
#>

							unsafe
							{
								#pragma warning disable CS8500 // This takes the address of, gets the size of, or declares a pointer to a managed type
								fixed (Entity* eptr = entities)
<# for (var k = 0; k < i; k++)
{
#>
								fixed (T<#= k #>* t<#= k #>ptr = t<#= k #>)
<#
}
#>
								#pragma warning restore CS8500
								{
									for (var i = 0; i < entities.Length; i++)
										q.Execute(eptr[i], <#= CallParametersPtr(i) #>);
								}
							}

							if (entityCount >= cursor.EntityBudget)
							{
								cursor.LastArchetype = lastCompletedArchetype;
								return entityCount;
							}
						}
					}
					finally
					{
						chunks.Dispose();
					}

					lastCompletedArchetype = archetype;
				}
			}

			cursor.Reset();
			return entityCount;
		}

		/// <summary>
		/// Execute a query in parallel over entities, blocks until complete.
		/// </summary>
		/// <param name="q"></param>
		/// <param name="query"></param>
		/// <param name="batchSize"></param>
		/// <returns></returns>
		/// <exception cref="AggregateException"></exception>
		<#= CoverageAttribute(i) #>
		public int ExecuteParallel<TQ, <#= queryConstraints #>>(
			TQ q,
			QueryDescription? query = null,
			int batchSize = 128
		)
			where <#= Constraints(i, 12) #>
			where TQ : IQuery<<#= queryConstraints #>>
		{
			query ??= GetCachedQuery<<#= queryConstraints #>>();

			var archetypes = query.GetArchetypes();

			// Early exit if there is no work to do, avoiding the cost of setting up the worker pool
			if (!query.Any())
				return 0;

			batchSize = Math.Clamp(batchSize, 1, Archetype.CHUNK_SIZE);

<# for (var k = 0; k < i; k++)
{
#>
			var c<#= k #> = ComponentID<T<#= k #>>.ID;
<#
}
#>

<#
			EmitParallelWorkLoopSetup(workItemName);
#>

			// Enqueue all of the work into the parallel workers
			var count = 0;
			foreach (var archetypeMatch in archetypes)
			{
			    var archetype = archetypeMatch.Archetype;

				count += archetype.EntityCount;

				using var enumerator = archetype.GetChunkEnumerator();

                while (enumerator.MoveNext())
				{
					var chunk = enumerator.Current;
					Debug.Assert(chunk != null);

					var entityCount = chunk.EntityCount;
					var numBatches = (int)Math.Ceiling(entityCount / (float)batchSize);

					// Inrement work counter for all of the batches we're about to create
					workCounter.AddCount(numBatches);

<# for (var k = 0; k < i; k++)
{
#>
					var t<#= k #> = chunk.GetComponentArray<T<#= k #>>(c<#= k #>);
<#
}
#>
					for (var b = 0; b < numBatches; b++)
					{
						var start = b * batchSize;
						var end = Math.Min(start + batchSize, entityCount);
						var batchCount = end - start;
						var eMem = chunk.Entities.Slice(start, batchCount);

						var item = new <#= workItemName #>(
							eMem,
<# for (var k = 0; k < i; k++)
{
#>
							t<#= k #>.AsMemory(start, batchCount),
<#
}
#>
							q
						);

<#
						EmitEnqueueParallelWork("item", false);
#>
					}
				}
			}

<#
			EmitParallelWorkLoopWaitAndTeardown(workItemName);
#>

			return count;
		}

		<#= CoverageAttribute(i) #>
		private readonly struct WorkItem<#= i #><TQ, <#= queryConstraints #>>
			: IWorkItem
			where <#= Constraints(i, 12) #>
			where TQ : IQuery<<#= queryConstraints #>>
		{
			private readonly TQ _q;

			private readonly ReadOnlyMemory<Entity> _entities;
<# for (var k = 0; k < i; k++)
{
#>
			private readonly Memory<T<#= k #>> _c<#= k #>;
<#
}
#>

			public WorkItem<#= i #>(
				ReadOnlyMemory<Entity> entities,
<# for (var k = 0; k < i; k++)
{
#>
				Memory<T<#= k #>> c<#= k #>,
<#
}
#>
				TQ q
			)
			{
				_entities = entities;

<# for (var k = 0; k < i; k++)
{
#>
				_c<#= k #> = c<#= k #>;
<#
}
#>

				_q = q;
			}

			public void Execute()
			{
				var eSpan = _entities.Span;
<# for (var k = 0; k < i; k++)
{
#>
				var c<#= k #> = _c<#= k #>.Span;
<#
}
#>

				for (var i = 0; i < _entities.Length; i++)
				{
					_q.Execute(
						eSpan[i]
<# for (var k = 0; k < i; k++)
{
#>
						, ref c<#= k #>[i]
<#
}
#>
					);
				}
			}
		}
	}
}
<#
}
#>


<#+ 
	static string CoverageAttribute(int index)
	{
		if (index < 2)
			return "";
		return "[ExcludeFromCodeCoverage]";
	}

	static string DocsQueryDescription()
	{
		return @"
		/// <param name=""query"">
		/// Optional query to filter by. If non-null this <b>must</b> Include all of the component
		/// types specified in the type signature of this call!
		/// <br /><br />
		/// If null a default query will be used, selecting all entities which include the components
		/// in the type signature.
		/// </param>
		";
	}

	static string DocsRefQueryDescription()
	{
		return @"
		/// <param name=""query"">
		/// Optional query to filter by. If non-null this <b>must</b> Include all of the component
		/// types specified in the type signature of this call!
		/// <br /><br />
		/// If null a default query will be used, selecting all entities which include the components
		/// in the type signature. This query object will be written to the query parameter by ref. It
		/// can be used next frame to slightly speed up query execution.
		/// </param>
		";
	}

	static string Constraints(int count, int spaces = 4)
    {
		var prefix = new string(' ', spaces);
        var str = string.Join(
			$"\r\n{prefix}where ",
			Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
		);

		return str;
    }

	static string Refs(int start, int count)
	{
		var str = string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref T{x} t{x}")
		);

		return str;
	}

	static string Ins(int start, int count)
	{
		return string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref readonly T{x} t{x}")
		);
	}

    static string CallParameters(int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"ref t{x}[i]")
        );

        return str;
    }

	static string CallParametersPtr(int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"ref t{x}ptr[i]")
        );

        return str;
    }
#>