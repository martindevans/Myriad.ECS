<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    const int PARAM_COUNT = 16;
#>
using Myriad.ECS.Queries;
using Myriad.ECS.IDs;
using Myriad.ECS.xxHash;
using Myriad.ECS.Collections;
using Myriad.ECS.Components;
using System.Runtime.InteropServices;
using System.Diagnostics.CodeAnalysis;

#if NETSTANDARD2_1
using Myriad.ECS.Extensions;
#endif

// ReSharper disable UnusedType.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable LoopCanBeConvertedToQuery
// ReSharper disable CheckNamespace
// ReSharper disable ArrangeAccessorOwnerBody

namespace Myriad.ECS.Worlds;

public partial class World
{
    internal QueryDescription? TryGetCachedQuery(OrderedListSet<ComponentID> components)
    {
        return components.Count switch
        {
<# for (var i = 1; i <= PARAM_COUNT; i++) { #>
            <#= i #> => GetCachedQuery(
<# for (var j = 0; j < i; j++) { #>
                components[<#= j #>]<#= j != i - 1 ? "," : "" #>
<# } #>
            ),
<# } #>
            _ => null,
        };
    }

    // Cache of all queries with 1 included components.
    private readonly Dictionary<int, QueryDescription> _queryCache1 = [ ];
    private readonly ReaderWriterLockSlim _lock1 = new();

    private QueryDescription GetCachedQuery(ComponentID id0)
    {
        // Try to find query
        _lock1.EnterReadLock();
        try
        {
            // Find query that matches this types
            if (_queryCache1.TryGetValue(id0.Value, out var q))
                return q;
        }
        finally
        {
            _lock1.ExitReadLock();
        }

        // Didn't find one, create it now
        var include = FrozenOrderedListSet<ComponentID>.Create(stackalloc ComponentID[] { id0 });
        var exclude = include.Contains(ComponentID<Phantom>.ID)
            ? FrozenOrderedListSet<ComponentID>.Empty
            : QueryBuilder.SetWithJustPhantom;

        var query = new QueryDescription(
            this,
            include,
            exclude,
            FrozenOrderedListSet<ComponentID>.Empty,
            FrozenOrderedListSet<ComponentID>.Empty
        );

        _lock1.EnterWriteLock();
        try
        {
            // Check if it's already in the cache (due to a race). If so, return the shared one.
            if (_queryCache1.TryGetValue(id0.Value, out var existingQuery))
                return existingQuery;

            // Add query to the cache
            _queryCache1[id0.Value] = query;

            return query;
        }
        finally
        {
            _lock1.ExitWriteLock();
        }
    }

    /// <summary>
    /// Get a query that finds entities which include all of the given types. This query
    /// will be shared with other requests for the same set of types.
    /// </summary>
    /// <returns>A query that finds entities which include all of the given types</returns>
    public QueryDescription GetCachedQuery<T0>()
        where T0 : IComponent
    {
        return GetCachedQuery(ComponentID<T0>.ID);
    }

    // Cache of all queries with 2 included components. Key is the 2 component IDs combined together
    private readonly Dictionary<long, QueryDescription> _queryCache2 = [ ];
    private readonly ReaderWriterLockSlim _lock2 = new();

    private QueryDescription GetCachedQuery(ComponentID id0, ComponentID id1)
    {
        var u = new Union64
        {
            I0 = Math.Min(id0.Value, id1.Value),
            I1 = Math.Max(id0.Value, id1.Value),
        };
        var key = u.Long;

        // Find query that matches these types
        _lock2.EnterReadLock();
        try
        {
            if (_queryCache2.TryGetValue(key, out var q))
                return q;
        }
        finally
        {
            _lock2.ExitReadLock();
        }

        // Didn't find one, create it now
        var include = FrozenOrderedListSet<ComponentID>.Create(stackalloc ComponentID[] { id0, id1 });
        var exclude = include.Contains(ComponentID<Phantom>.ID)
            ? FrozenOrderedListSet<ComponentID>.Empty
            : QueryBuilder.SetWithJustPhantom;

        var query = new QueryDescription(
            this,
            include,
            exclude,
            FrozenOrderedListSet<ComponentID>.Empty,
            FrozenOrderedListSet<ComponentID>.Empty
        );

        _lock2.EnterWriteLock();
        try
        {
            // Check if it's already in the cache (due to a race). If so, return the shared one.
            if (_queryCache2.TryGetValue(key, out var existingQuery))
                return existingQuery;

            // Add query to the cache
            _queryCache2[key] = query;

            return query;
        }
        finally
        {
            _lock2.ExitWriteLock();
        }
    }

    /// <summary>
    /// Get a query that finds entities which include all of the given types. This query
    /// will be shared with other requests for the same set of types.
    /// </summary>
    /// <returns>A query that finds entities which include all of the given types</returns>
    public QueryDescription GetCachedQuery<T0, T1>()
        where T0 : IComponent
        where T1 : IComponent
    {
        return GetCachedQuery(ComponentID<T0>.ID, ComponentID<T1>.ID);
    }

<# for (var i = 3; i <= PARAM_COUNT; i++)
{
    var tparams = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
    if (i > 0)
        tparams = $"<{tparams}>";

    var cparams = string.Join(", ", Enumerable.Range(0, i).Select(x => "ComponentID id" + x));

    var refparams = string.Join(", ", Enumerable.Range(0, i).Select(x => "ref T" + x));

    var refparamstup = refparams;
    if (i == 0)
    {
        refparamstup = "Entity";
    }
    else
    {
        refparamstup = "RefTuple" + i + tparams;
    }
#>

    // Cache of all queries with <#= i #> included components. 
    // Key is the hash of the sorted component IDs.
    // The value has a list of tuples, containing:
    // - The actual components for this item (sorted)
    // - The query itself
    private readonly Dictionary<ulong, List<(int[], QueryDescription)>> _queryCache<#= i #> = [ ];

    private readonly ReaderWriterLockSlim _lock<#= i #> = new();

    <#= CoverageAttribute(i) #>
    private QueryDescription GetCachedQuery(<#= cparams #>)
    {
        // Accumulate all components in ascending order
        Span<int> orderedComponents = stackalloc int[] {
<# for (var k = 0; k < i; k++)
{
#>
            <#= "id" + k #>.Value,
<#
}
#>
        };
<# if (i > 1)
{
#>
        orderedComponents.Sort();
<#
}
#>

        // Calculate hash of components, for fast rejection
        var byteSpan = MemoryMarshal.Cast<int, byte>(orderedComponents);
        var hash = xxHash64.ComputeHash(byteSpan, seed: 42);

        _lock<#= i #>.EnterReadLock();
        try
        {
            // Hash collisions are possible but very unlikely. Use the hash to get a list of all queries with this hash
            // and then perform a linear search over the list to find a query with exactly the same set of components.
            // The list of components has been sorted into order (and is stored in order) so we can just do a direct span
            // equality check, which should be very fast (SIMD accelerated).
            if (_queryCache<#= i #>.TryGetValue(hash, out var list))
                foreach (var (c, q) in list)
                    if (orderedComponents.SequenceEqual(c))
                        return q;
        }
        finally
        {
            _lock<#= i #>.ExitReadLock();
        }

        // Didn't find query, create it now
        var include = FrozenOrderedListSet<ComponentID>.Create(stackalloc ComponentID[] {
<# for (var k = 0; k < i; k++)
{
#>
            <#= "id" + k #>,
<#
}
#>
        });

        // Auto exclude phantoms, unless specifically included
        var exclude = include.Contains(ComponentID<Phantom>.ID)
            ? FrozenOrderedListSet<ComponentID>.Empty
            : QueryBuilder.SetWithJustPhantom;

        var query = new QueryDescription(
            this,
            include,
            exclude,
            FrozenOrderedListSet<ComponentID>.Empty,
            FrozenOrderedListSet<ComponentID>.Empty
        );

        _lock<#= i #>.EnterWriteLock();
        try
        {
            // Get or create list of items with this hash
            if (!_queryCache<#= i #>.TryGetValue(hash, out var list))
            {
                list = [ ];
                _queryCache<#= i #>.Add(hash, list);
            }

            // Check again if a matching query has been added (in case of a race)
            foreach (var (c, q) in list)
                if (orderedComponents.SequenceEqual(c))
                    return q;

            // Add query to the cache
            list.Add((orderedComponents.ToArray(), query));

            return query;
        }
        finally
        {
            _lock<#= i #>.ExitWriteLock();
        }
    }

    /// <summary>
    /// Get a query that finds entities which include all of the given types. This query
    /// will be shared with other requests for the same set of types.
    /// </summary>
    /// <returns>A query that finds entities which include all of the given types</returns>
    <#= CoverageAttribute(i) #>
    public QueryDescription GetCachedQuery<#= tparams #>()
        <#= Constraints(i, 8) #>
    {
        return GetCachedQuery(
<# for (var k = 0; k < i; k++)
{
#>
            ComponentID<<#= "T" + k #>>.ID<#= k != (i - 1) ? "," : "" #>
<#
}
#>
        );
    }

<#
}
#>

}


<#+ 
    static string CoverageAttribute(int index)
	{
		if (index < 4)
			return "";
		return "[ExcludeFromCodeCoverage]";
	}

    static string Constraints(int count, int spaces = 4)
    {
        if (count == 0)
            return "";

        var prefix = new string(' ', spaces);
        var str = "where " + string.Join(
            $"\r\n{prefix}where ",
            Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
        );

        return str;
    }
#>