<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	const int PARAM_COUNT = 16;
#>
using Myriad.ECS.Queries;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

// ReSharper disable UnusedType.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable LoopCanBeConvertedToQuery
// ReSharper disable ConvertToPrimaryConstructor

<# for (var i = 1; i < PARAM_COUNT; i++)
{
	var delegate_type_params = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
	var delegate_wrapper_name = "QueryDelegateWrapper" + i;
	var delegate_call_params = string.Join(", ", Enumerable.Range(0, i).Select(x => $"ref t{x}"));
#>
namespace Myriad.ECS.Queries
{
	/// <summary>
	/// A delegate called for entities in a query. Receives just the components requested.
	/// </summary>
	public delegate void QueryDelegate<<#= delegate_type_params #>>(
		<#= string.Join(", ", Enumerable.Range(0, i).Select(x => "ref T" + x + " t" + x)) #>
	);

	/// <summary>
	/// A delegate called for entities in a query. Receives the entity and the components requested.
	/// </summary>
	public delegate void QueryDelegateEntity<<#= delegate_type_params #>>(
		Entity entity,
		<#= string.Join(", ", Enumerable.Range(0, i).Select(x => "ref T" + x + " t" + x)) #>
	);

	/// <summary>
	/// A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
	/// </summary>
	public delegate void QueryDelegateData<in TData, <#= delegate_type_params #>>(
		TData data,
		<#= string.Join(", ", Enumerable.Range(0, i).Select(x => "ref T" + x + " t" + x)) #>
	);

	/// <summary>
	/// A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
	/// </summary>
	public delegate void QueryDelegateEntityData<in TData, <#= delegate_type_params #>>(
		TData data,
		Entity entity,
		<#= string.Join(", ", Enumerable.Range(0, i).Select(x => "ref T" + x + " t" + x)) #>
	);

	<#= CoverageAttribute(i) #>
	internal readonly struct <#= delegate_wrapper_name #>E<<#= delegate_type_params #>>
		: IQuery<<#= delegate_type_params #>>
		where <#= Constraints(i, 12) #>
	{
		private readonly QueryDelegateEntity<<#= delegate_type_params #>> _delegate;

		public <#= delegate_wrapper_name #>E(QueryDelegateEntity<<#= delegate_type_params #>> @delegate)
        {
            _delegate = @delegate;
        }

		public void Execute(Entity e, <#= Refs(0, i) #>)
		{
			_delegate(e, <#= delegate_call_params #>);
		}
	}

	<#= CoverageAttribute(i) #>
	internal readonly struct <#= delegate_wrapper_name #><<#= delegate_type_params #>>
		: IQuery<<#= delegate_type_params #>>
		where <#= Constraints(i, 12) #>
	{
		private readonly QueryDelegate<<#= delegate_type_params #>> _delegate;

		public <#= delegate_wrapper_name #>(QueryDelegate<<#= delegate_type_params #>> @delegate)
        {
            _delegate = @delegate;
        }

		public void Execute(Entity e, <#= Refs(0, i) #>)
		{
			_delegate(<#= delegate_call_params #>);
		}
	}

	<#= CoverageAttribute(i) #>
	internal readonly struct <#= delegate_wrapper_name #>ED<TData, <#= delegate_type_params #>>
		: IQuery<<#= delegate_type_params #>>
		where <#= Constraints(i, 12) #>
	{
		private readonly QueryDelegateEntityData<TData, <#= delegate_type_params #>> _delegate;
		private readonly TData _data;

		public <#= delegate_wrapper_name #>ED(TData data, QueryDelegateEntityData<TData, <#= delegate_type_params #>> @delegate)
        {
			_data = data;
            _delegate = @delegate;
        }

		public void Execute(Entity e, <#= Refs(0, i) #>)
		{
			_delegate(_data, e, <#= delegate_call_params #>);
		}
	}

	<#= CoverageAttribute(i) #>
	internal readonly struct <#= delegate_wrapper_name #>D<TData, <#= delegate_type_params #>>
		: IQuery<<#= delegate_type_params #>>
		where <#= Constraints(i, 12) #>
	{
		private readonly QueryDelegateData<TData, <#= delegate_type_params #>> _delegate;
		private readonly TData _data;

		public <#= delegate_wrapper_name #>D(TData data, QueryDelegateData<TData, <#= delegate_type_params #>> @delegate)
        {
			_data = data;
            _delegate = @delegate;
        }

		public void Execute(Entity e, <#= Refs(0, i) #>)
		{
			_delegate(_data, <#= delegate_call_params #>);
		}
	}
}

namespace Myriad.ECS.Worlds
{
	public partial class World
	{
		/// <summary>
		/// Execute a delegate for every entity in a query.
		/// </summary>
		/// <param name="delegate"></param>
		/// <param name="query"></param>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Query<<#= delegate_type_params #>>(QueryDelegateEntity<<#= delegate_type_params #>> @delegate, ref QueryDescription? query)
			where <#= Constraints(i, 12) #>
		{
			return Execute<<#= delegate_wrapper_name #>E<<#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>E<<#= delegate_type_params #>>(@delegate),
				ref query
			);
		}

		/// <summary>
		/// Execute a delegate for every entity in a query.
		/// </summary>
		/// <param name="delegate"></param>
		/// <param name="query"></param>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Query<<#= delegate_type_params #>>(QueryDelegateEntity<<#= delegate_type_params #>> @delegate, QueryDescription? query = null)
			where <#= Constraints(i, 12) #>
		{
			return Execute<<#= delegate_wrapper_name #>E<<#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>E<<#= delegate_type_params #>>(@delegate),
				ref query
			);
		}

		/// <summary>
		/// Execute a delegate for every entity in a query, in parallel.
		/// </summary>
		/// <param name="delegate"></param>
		/// <param name="query"></param>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int QueryParallel<<#= delegate_type_params #>>(QueryDelegateEntity<<#= delegate_type_params #>> @delegate, QueryDescription? query = null)
			where <#= Constraints(i, 12) #>
		{
			return ExecuteParallel<<#= delegate_wrapper_name #>E<<#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>E<<#= delegate_type_params #>>(@delegate),
				query
			);
		}

		/// <summary>
		/// Execute a delegate for every entity in a query.
		/// </summary>
		/// <param name="delegate"></param>
		/// <param name="query"></param>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Query<<#= delegate_type_params #>>(QueryDelegate<<#= delegate_type_params #>> @delegate, ref QueryDescription? query)
			where <#= Constraints(i, 12) #>
		{
			return Execute<<#= delegate_wrapper_name #><<#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #><<#= delegate_type_params #>>(@delegate),
				ref query
			);
		}

		/// <summary>
		/// Execute a delegate for every entity in a query.
		/// </summary>
		/// <param name="delegate"></param>
		/// <param name="query"></param>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Query<<#= delegate_type_params #>>(QueryDelegate<<#= delegate_type_params #>> @delegate, QueryDescription? query = null)
			where <#= Constraints(i, 12) #>
		{
			return Execute<<#= delegate_wrapper_name #><<#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #><<#= delegate_type_params #>>(@delegate),
				ref query
			);
		}

		/// <summary>
		/// Execute a delegate for every entity in a query, in parallel.
		/// </summary>
		/// <param name="delegate"></param>
		/// <param name="query"></param>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int QueryParallel<<#= delegate_type_params #>>(QueryDelegate<<#= delegate_type_params #>> @delegate, QueryDescription? query = null)
			where <#= Constraints(i, 12) #>
		{
			return ExecuteParallel<<#= delegate_wrapper_name #><<#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #><<#= delegate_type_params #>>(@delegate),
				query
			);
		}

		// vv-- TData variants --vv //

		/// <summary>
		/// Execute a delegate for every entity in a query. Passing an object through into every call.
		/// </summary>
		/// <param name="delegate"></param>
		/// <param name="query"></param>
		/// <param name="data">The object passed into every call</param>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Query<TData, <#= delegate_type_params #>>(TData data, QueryDelegateEntityData<TData, <#= delegate_type_params #>> @delegate, ref QueryDescription? query)
			where <#= Constraints(i, 12) #>
		{
			return Execute<<#= delegate_wrapper_name #>ED<TData, <#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>ED<TData, <#= delegate_type_params #>>(data, @delegate),
				ref query
			);
		}

		/// <summary>
		/// Execute a delegate for every entity in a query. Passing an object through into every call.
		/// </summary>
		/// <param name="delegate"></param>
		/// <param name="query"></param>
		/// <param name="data">The object passed into every call</param>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Query<TData, <#= delegate_type_params #>>(TData data, QueryDelegateEntityData<TData, <#= delegate_type_params #>> @delegate, QueryDescription? query = null)
			where <#= Constraints(i, 12) #>
		{
			return Execute<<#= delegate_wrapper_name #>ED<TData, <#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>ED<TData, <#= delegate_type_params #>>(data, @delegate),
				ref query
			);
		}

		/// <summary>
		/// Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
		/// </summary>
		/// <param name="delegate"></param>
		/// <param name="query"></param>
		/// <param name="data">The object passed into every call</param>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int QueryParallel<TData, <#= delegate_type_params #>>(TData data, QueryDelegateEntityData<TData, <#= delegate_type_params #>> @delegate, QueryDescription? query = null)
			where <#= Constraints(i, 12) #>
		{
			return ExecuteParallel<<#= delegate_wrapper_name #>ED<TData, <#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>ED<TData, <#= delegate_type_params #>>(data, @delegate),
				query
			);
		}

		/// <summary>
		/// Execute a delegate for every entity in a query. Passing an object through into every call.
		/// </summary>
		/// <param name="delegate"></param>
		/// <param name="query"></param>
		/// <param name="data">The object passed into every call</param>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Query<TData, <#= delegate_type_params #>>(TData data, QueryDelegateData<TData, <#= delegate_type_params #>> @delegate, ref QueryDescription? query)
			where <#= Constraints(i, 12) #>
		{
			return Execute<<#= delegate_wrapper_name #>D<TData, <#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>D<TData, <#= delegate_type_params #>>(data, @delegate),
				ref query
			);
		}

		/// <summary>
		/// Execute a delegate for every entity in a query. Passing an object through into every call.
		/// </summary>
		/// <param name="delegate"></param>
		/// <param name="query"></param>
		/// <param name="data">The object passed into every call</param>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int Query<TData, <#= delegate_type_params #>>(TData data, QueryDelegateData<TData, <#= delegate_type_params #>> @delegate, QueryDescription? query = null)
			where <#= Constraints(i, 12) #>
		{
			return Execute<<#= delegate_wrapper_name #>D<TData, <#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>D<TData, <#= delegate_type_params #>>(data, @delegate),
				ref query
			);
		}

		/// <summary>
		/// Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
		/// </summary>
		/// <param name="delegate"></param>
		/// <param name="query"></param>
		/// <param name="data">The object passed into every call</param>
		<#= CoverageAttribute(i) #>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int QueryParallel<TData, <#= delegate_type_params #>>(TData data, QueryDelegateData<TData, <#= delegate_type_params #>> @delegate, QueryDescription? query = null)
			where <#= Constraints(i, 12) #>
		{
			return ExecuteParallel<<#= delegate_wrapper_name #>D<TData, <#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>D<TData, <#= delegate_type_params #>>(data, @delegate),
				query
			);
		}
	}
}

<#
}
#>


<#+ 
	static string CoverageAttribute(int index)
	{
		if (index < 2)
			return "";
		return "[ExcludeFromCodeCoverage]";
	}

	static string Constraints(int count, int spaces = 4)
    {
		var prefix = new string(' ', spaces);
        var str = string.Join(
			$"\r\n{prefix}where ",
			Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
		);

		return str;
    }

	static string Name(int mutable)
	{
		return "IQuery" + mutable;
	}

	static string Refs(int start, int count)
	{
		var str = string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref T{x} t{x}")
		);

		return str;
	}

	static string Ins(int start, int count)
	{
		return string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref readonly T{x} t{x}")
		);
	}

    static string CallParameters(int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"ref t{x}[i]")
        );

        return str;
    }
#>