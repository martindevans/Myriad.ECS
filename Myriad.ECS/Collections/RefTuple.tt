<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	const int PARAM_COUNT = 16;
#>

// ReSharper disable UnusedType.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable LoopCanBeConvertedToQuery
// ReSharper disable CheckNamespace
// ReSharper disable ArrangeAccessorOwnerBody

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

namespace Myriad.ECS.Collections;

#if NET6_0_OR_GREATER

public readonly ref struct RefT<T>
{
	private readonly ref T _ref;

	public ref T Ref 
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => ref _ref;
	}

	internal RefT(ref T r)
	{
		_ref = ref r;
	}

	public static implicit operator T(RefT<T> reference)
    {
		return reference.Ref;
    }
}

#else

public readonly struct RefT<T>
{
	private readonly T[] _arr;
	private readonly int _index;

	public ref T Ref
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
	    get
	    {
			return ref _arr[_index];
	    }
	}

	internal RefT(T[] a, int i)
	{
		_arr = a;
		_index = i;
	}

	public static implicit operator T(RefT<T> reference)
    {
		return reference.Ref;
    }
}

#endif

<# for (var i = 1; i <= PARAM_COUNT; i++)
{
	var tparams = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
	var refparams = string.Join(", ", Enumerable.Range(0, i).Select(x => "ref T" + x));

	var refparamstup = refparams;
	if (i > 1)
	{
		refparamstup = "RefTuple" + "<" + tparams + ">";
	}
#>

<#= CoverageAttribute(i) #>
public readonly ref struct RefTuple<<#= tparams #>>
{
	public readonly Entity Entity;

<# for (var k = 0; k < i; k++)
{
#>
	private readonly RefT<T<#= k #>> _item<#= k #>;
	public ref T<#= k #> Item<#= k #>
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => ref _item<#= k #>.Ref;
	}

<#
}
#>
	internal RefTuple(Entity entity, <#= string.Join(", ", Enumerable.Range(0, i).Select(x => "RefT<T" + x + "> item" + x)) #>)
	{
		Entity = entity;
<# for (var k = 0; k < i; k++)
{
#>
		_item<#= k #> = item<#= k #>;
<#
}
#>
	}

	public void Deconstruct(out Entity entity, <#= string.Join(", ", Enumerable.Range(0, i).Select(x => "out RefT<T" + x + "> item" + x)) #>)
	{
		entity = Entity;
<# for (var k = 0; k < i; k++)
{
#>
		item<#= k #> = _item<#= k #>;
<#
}
#>
	}

<# if (i > 1) { #>
	public void Deconstruct(<#= string.Join(", ", Enumerable.Range(0, i).Select(x => "out RefT<T" + x + "> item" + x)) #>)
	{
<# for (var k = 0; k < i; k++) { #>
		item<#= k #> = _item<#= k #>;
<# } #>
	}
<# } #>
}
<# } #>


<#+ 
	static string CoverageAttribute(int index)
	{
		if (index < 3)
			return "";
		return "[ExcludeFromCodeCoverage]";
	}

	static string Constraints(int count, int spaces = 4)
    {
		var prefix = new string(' ', spaces);
        var str = string.Join(
			$"\r\n{prefix}where ",
			Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
		);

		return str;
    }

	static string Name(int mutable)
	{
		return "IQuery" + mutable;
	}

	static string Refs(int start, int count)
	{
		var str = string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref T{x} t{x}")
		);

		return str;
	}

	static string Ins(int start, int count)
	{
		return string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref readonly T{x} t{x}")
		);
	}

    static string CallParameters(int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"ref t{x}[i]")
        );

        return str;
    }
#>