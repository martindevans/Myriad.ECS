<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    const int PARAM_COUNT = 16;
#>
using System.Diagnostics.CodeAnalysis;
using Myriad.ECS.IDs;
using Myriad.ECS.Queries;
using Myriad.ECS.Worlds;

// ReSharper disable UnusedType.Global
// ReSharper disable StaticMemberInGenericType

namespace Myriad.ECS.Paths;

public readonly partial struct Path
{
<# for (var i = 1; i < PARAM_COUNT; i++)
{
    var tparams = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
#>
    /// <summary>
    /// Base class for path steps that take generic parameters
    /// </summary>
<# for (var j = 0; j < i; j++) { #>
    /// <typeparam name="T<#= j #>"></typeparam>
<# } #>
    [ExcludeFromCodeCoverage]
    public abstract class BaseGenericStep<<#= tparams #>>
        : IStep
<# for (var j = 0; j < i; j++) { #>
        where T<#= j #> : IComponent
<# } #>
    {
#region Component IDs
<# for (var j = 0; j < i; j++) { #>
        /// <summary>Component ID for T<#= j #></summary>
        protected static readonly ComponentID C<#= j #> = ComponentID<T<#= j #>>.ID;
<# } #>

        /// <summary>All components IDs, in order</summary>
        protected static readonly ReadOnlyMemory<ComponentID> SortedComponentIDs;

        static BaseGenericStep()
        {
            var arr = new[] {
<# for (var j = 0; j < i; j++) { #>
                C<#= j #>,
<# } #>
            };
            Array.Sort(arr);

            SortedComponentIDs = arr;
        }
        #endregion

        /// <inheritdoc />
        public abstract bool TryFollow(ref Entity entity);
    }

    /// <summary>
    /// Construct a path step that checks if a predicate is true
    /// </summary>
    /// <typeparam name="P">Predicate</typeparam>
<# for (var j = 0; j < i; j++) { #>
    /// <typeparam name="T<#= j #>"></typeparam>
<# } #>
    <#= CoverageAttribute(i) #>
    public sealed class Predicate<P, <#= tparams #>>
        : BaseGenericStep<<#= tparams #>>
        where P : IQueryMap<bool, <#= tparams #>>
<# for (var j = 0; j < i; j++) { #>
        where T<#= j #> : IComponent
<# } #>
    {
        private readonly P _predicate;

        /// <summary>
        /// Create a new <see cref="Predicate{P,T0}"/>
        /// </summary>
        /// <param name="predicate"></param>
        public Predicate(P predicate)
        {
            _predicate = predicate;
        }

        /// <inheritdoc />
        public override bool TryFollow(ref Entity entity)
        {
            // Try to get entity info for this entity
            var dummy = default(EntityInfo);
            ref var entityInfo = ref entity.World.GetEntityInfo(entity.ID, ref dummy, out var isDead);

            // Can't follow a path through a dead entity!
            if (isDead)
                return false;

            // Check if all components are present in one go
            var components = entityInfo.Chunk.Archetype.Components;
            if (!components.IsSupersetOfSortedSpan(SortedComponentIDs.Span))
                return false;

            // Get component references
            var row = entityInfo.GetRow(entity.ID);
<# for (var j = 0; j < i; j++) { #>
            ref var t<#= j #> = ref row.GetMutable<T<#= j #>>(C<#= j #>);
<# } #>

            // Execute predicate
            return _predicate.Execute(entity, <#= CallParameters(i) #>);
        }
    }

    /// <summary>
    /// Try to follow a component, extracting an entity from it
    /// </summary>
    /// <typeparam name="M"></typeparam>
<# for (var j = 0; j < i; j++) { #>
    /// <typeparam name="T<#= j #>"></typeparam>
<# } #>
    <#= CoverageAttribute(i) #>
    public sealed class Follow<M, <#= tparams #>>
        : BaseGenericStep<<#= tparams #>>
        where M : IQueryMap<Entity, <#= tparams #>>
<# for (var j = 0; j < i; j++) { #>
        where T<#= j #> : IComponent
<# } #>
    {
        private readonly M _map;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="map"></param>
        public Follow(M map)
        {
            _map = map;
        }

        /// <inheritdoc />
        public override bool TryFollow(ref Entity entity)
        {
            // Try to get entity info for this entity
            var dummy = default(EntityInfo);
            ref var entityInfo = ref entity.World.GetEntityInfo(entity.ID, ref dummy, out var isDead);

            // Can't follow a path through a dead entity!
            if (isDead)
                return false;

            // Check if all components are present in one go
            var components = entityInfo.Chunk.Archetype.Components;
            if (!components.IsSupersetOfSortedSpan(SortedComponentIDs.Span))
                return false;

            // Get component references
            var row = entityInfo.GetRow(entity.ID);
<# for (var j = 0; j < i; j++) { #>
            ref var t<#= j #> = ref row.GetMutable<T<#= j #>>(C<#= j #>);
<# } #>

            // Execute predicate
            entity = _map.Execute(entity, <#= CallParameters(i) #>);
            return true;
        }
    }
<# } #>
}

<#+ 
    static string CoverageAttribute(int index)
	{
		if (index < 3)
			return "";
		return "[ExcludeFromCodeCoverage]";
	}

    static string Constraints(int count, int spaces = 4)
    {
        if (count == 0)
            return "";

        var prefix = new string(' ', spaces);
        var str = "where " + string.Join(
            $"\r\n{prefix}where ",
            Enumerable.Range(0, count).Select(x => $"T{x} : IEntityRelationComponent")
        );

        return str;
    }

    static string Refs(int count)
	{
		var str = string.Join(
			", ",
			Enumerable.Range(0, count).Select(x => $"ref T{x} t{x}")
		);

		return str;
	}

    static string CallParameters(int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"ref t{x}")
        );

        return str;
    }
#>