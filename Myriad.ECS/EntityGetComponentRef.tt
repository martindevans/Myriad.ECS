<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Myriad.ECS.Collections;
using Myriad.ECS.IDs;
using Myriad.ECS.Worlds;
using System.Diagnostics.CodeAnalysis;

namespace Myriad.ECS;

/* dotcover disable */

public readonly partial record struct EntityId
{
<# for (var i = 2; i <= 16; i++)
{
    var queryConstraints = string.Join(", ", Enumerable.Range(0, i).Select(x => "where T" + x + " : IComponent"));
    var types = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
#>
    /// <summary>
    /// Get a tuple of several components
    /// </summary>
    <#= CoverageAttribute(i) #>
    public RefTuple<<#= types #>> GetComponentRef<<#= types #>>(World world)
        where <#= Constraints(i, 8) #>
    {
        ref var entityInfo = ref world.GetEntityInfo(this);

        return new RefTuple<<#= types #>>(
            ToEntity(world),
<# for (var j = 0; j < i; j++)
{
    var comma = (j == (i - 1)) ? "" : ",";
#>
#if NET6_0_OR_GREATER
            new RefT<T<#= j #>>(ref entityInfo.Chunk.GetRef<T<#= j #>>(entityInfo.RowIndex))<#= comma #>
#else
            new RefT<T<#= j #>>(entityInfo.Chunk.GetComponentArray<T<#= j #>>(), entityInfo.RowIndex)<#= comma #>
#endif

<#
}
#>
        );
    }

    /// <summary>
    /// Check if this entity contains a tuple of several components
    /// </summary>
    <#= CoverageAttribute(i) #>
    public bool HasComponent<<#= types #>>(World world)
        where <#= Constraints(i, 8) #>
    {
        // Try to get entity info ref, returns ref to dummy if not
        EntityInfo dummy = default;
        ref var entityInfo = ref world.GetEntityInfo(this, ref dummy, out var isNotExists);

        // If it doesn't exist it doesn't have the components!
        if (isNotExists)
            return false;

        // Get a cached list of components that has been sorted
        var components = SortedListOfComponents<<#= types #>>.Components;

        // Check if they are all in the components set
        return entityInfo.Chunk.Archetype.Components.IsSupersetOfSortedSpan(components.Span);
    }

    <#= CoverageAttribute(i) #>
    private static class SortedListOfComponents<<#= types #>>
        where <#= Constraints(i, 8) #>
    {
        // ReSharper disable once StaticMemberInGenericType
        public static readonly ReadOnlyMemory<ComponentID> Components;

        static SortedListOfComponents()
        {
            // Create sorted array of components
            var components = new[]
            {
<# for (var j = 0; j < i; j++)
{
    var comma = (j == (i - 1)) ? "" : ",";
#>
                ComponentID<T<#= j #>>.ID,
<#
}
#>
            };
            Array.Sort(components);

            // Deduplicate components
            var insertIndex = 1;
            for (var i = 1; i < components.Length; i++)
            {
                if (components[i].Value != components[insertIndex - 1].Value)
                {
                    components[insertIndex] = components[i];
                    insertIndex++;
                }
            }

            Components = components.AsMemory(0, insertIndex);
        }
    }

<#
}
#>
}

public readonly partial record struct Entity
{
<# for (var i = 2; i <= 16; i++)
{
    var queryConstraints = string.Join(", ", Enumerable.Range(0, i).Select(x => "where T" + x + " : IComponent"));
    var types = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
#>
    /// <summary>
    /// Get a tuple of several components
    /// </summary>
    <#= CoverageAttribute(i) #>
    public RefTuple<<#= types #>> GetComponentRef<<#= types #>>()
        where <#= Constraints(i, 8) #>
    {
        return ID.GetComponentRef<<#= types #>>(World);
    }

    /// <summary>
    /// Get a tuple of several components
    /// </summary>
    <#= CoverageAttribute(i) #>
    public bool HasComponent<<#= types #>>()
        where <#= Constraints(i, 8) #>
    {
        return ID.HasComponent<<#= types #>>(World);
    }

<#
}
#>
}

<#+ 
    static string CoverageAttribute(int index)
	{
		if (index < 3)
			return "";
		return "[ExcludeFromCodeCoverage]";
	}

	static string Constraints(int count, int spaces = 4)
    {
		var prefix = new string(' ', spaces);
        var str = string.Join(
			$"\r\n{prefix}where ",
			Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
		);

		return str;
    }
#>